<Component name="Components">

<Markdown><![CDATA[
# Components

We've already seen a number of XMLUI components in action: [DataSource](https://xmlui-docs.azurewebsites.net/components/DataSource),
[Items](https://xmlui-docs.azurewebsites.net/components/Items),
[List](https://xmlui-docs.azurewebsites.net/components/List),
[Markdown](https://xmlui-docs.azurewebsites.net/components/Markdown),
[Select](https://xmlui-docs.azurewebsites.net/components/Select),
[Option](https://xmlui-docs.azurewebsites.net/components/Option),
[Table](https://xmlui-docs.azurewebsites.net/components/Table).

## Built-in components

As an XMLUI developer you'll create user interfaces by combining these with others in the [core library](https://xmlui-docs.azurewebsites.net/components/), drawing from these categories:

**Data**: [AppState](https://xmlui-docs.azurewebsites.net/components/AppState),
[DataSource](https://xmlui-docs.azurewebsites.net/components/DataSource),
[APICall](https://xmlui-docs.azurewebsites.net/components/APICall) ...

**Display**: [Avatar](https://xmlui-docs.azurewebsites.net/components/Avatar),
[Card](https://xmlui-docs.azurewebsites.net/components/Card), [Heading](https://xmlui-docs.azurewebsites.net/components/Heading), [Image](https://xmlui-docs.azurewebsites.net/components/Image),
[Icon](https://xmlui-docs.azurewebsites.net/components/Icon),
[Markdown](https://xmlui-docs.azurewebsites.net/components/Markdown),
[Text](https://xmlui-docs.azurewebsites.net/components/Text),
[Table](https://xmlui-docs.azurewebsites.net/components/Table) ...

**Input**: [Checkbox](https://xmlui-docs.azurewebsites.net/components/Checkbox),
[DatePicker](https://xmlui-docs.azurewebsites.net/components/DatePicker), [Form](https://xmlui-docs.azurewebsites.net/components/Form),
[FormItem](https://xmlui-docs.azurewebsites.net/components/FormItem),
[FileInput](https://xmlui-docs.azurewebsites.net/components/FileInput),
[NumberBox](https://xmlui-docs.azurewebsites.net/components/NumberBox),
[Select](https://xmlui-docs.azurewebsites.net/components/Select),
[TextArea](https://xmlui-docs.azurewebsites.net/components/TextArea),
[TextBox](https://xmlui-docs.azurewebsites.net/components/TextBox) ...

**Layout**: [FlowLayout](https://xmlui-docs.azurewebsites.net/components/FlowLayout), [HStack](https://xmlui-docs.azurewebsites.net/components/HStack), [VStack](https://xmlui-docs.azurewebsites.net/components/VStack) ...


**Navigation**: [DropdownMenu](https://xmlui-docs.azurewebsites.net/components/DropdownMenu),
[MenuItem](https://xmlui-docs.azurewebsites.net/components/MenuItem),
[NavLink](https://xmlui-docs.azurewebsites.net/components/NavLink),
[NavPanel](https://xmlui-docs.azurewebsites.net/components/NavPanel),
[Tabs](https://xmlui-docs.azurewebsites.net/components/Tabs),
[TabItem](https://xmlui-docs.azurewebsites.net/components/TabItem) ...

## Custom components

You'll also create your own components to combine and extend the built-ins. For example, here's a component that represents the stops on a London tube line.

```xmlui
<TubeStops line="Bakerloo"/>
```

An instance of `TubeStops` extracts details for a given tube line. Multiple instances can be arranged on the display using layout components. For example, here's a two-column layout.

```xmlui
  <HStack>
    <Stack width="50%">
      <TubeStops line="Bakerloo" />
    </Stack>
    <Stack width="50%">
      <TubeStops line="Victoria" />
    </Stack>
  </HStack>
```
]]></Markdown>

  <HStack>
    <Stack width="50%">
      <TubeStops line="Bakerloo" />
    </Stack>
    <Stack width="50%">
      <TubeStops line="Victoria" />
    </Stack>
  </HStack>

<Markdown><![CDATA[

## Anatomy of a custom component

Here's the XMLUI markup for the `<TubeStops>` component.

```xmlui
<Component name="TubeStops">

  <DataSource
    id="stops"
    url="https://api.tfl.gov.uk/Line/{$props.line}/StopPoints"
    transformResult="{transformStops}"
  />

  <Text variant="strong">{$props.line}</Text>

  <Table data="{stops}">
    <Column width="3*" bindTo="name" />
    <Column bindTo="zone" />
    <Column bindTo="wifi" >
      <Fragment when="{$item.wifi === 'yes'}">
        <Icon name="checkmark"/>
      </Fragment>
    </Column>
    <Column bindTo="toilets" >
      <Fragment when="{$item.toilets === 'yes'}">
        <Icon name="checkmark"/>
      </Fragment>
    </Column>

    <Column bindTo="lifts" />
    <Column bindTo="escalators" />
    <Column bindTo="cash_machines" />
  </Table>

</Component>
```

It illustrates these common patterns.

- **Define a dynamic data source**. When this page embeds `<TubeStops line="Bakerloo"/>`, the `TubeStops` component receives a `line` property used to form the URL that fetches data.

- **Transform data**. When API responses are complex, the expressions needed to unpack them can clutter your XMLUI markup. In this case the  component offloads that work to a `transformStops` function so it can work with a simplified structure.

- **Enrich data**. The transformed data has `yes`/`no` values for `wifi` and `toilets`. `TubeStops` uses [Fragment](https://xmlui-docs.azurewebsites.net/components/Fragment) to display an [Icon](https://xmlui-docs.azurewebsites.net/components/Icon) only for `yes` values.
]]></Markdown>

When you use custom components to access, transform, and present data, your XMLUI markup stays clean, readable, and easy to read and maintain.


<Link icon="arrowright" label="Themes" to="/themes" />


</Component>
